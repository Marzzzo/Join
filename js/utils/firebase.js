const BASE_URL = 'https://join-418-default-rtdb.europe-west1.firebasedatabase.app/';

/**
 * Fetches data from the specified URL
 *
 * @param {string} url - The URL from which to fetch the data
 * @param {object} options - Options for the fetch request (method, headers, body)
 * @return {Promise<object|undefined>} - A promise that resolves to a JSON object on success or `undefined` on failure
 */
async function fetchData(url, options) {
  try {
    const response = await fetch(url, options);
    if (!response.ok) throw new Error(`Server Error: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Fetch Error:', error);
    return undefined;
  }
}

async function postNewTaskToDB(newTask) {
  const url = BASE_URL + '/board/newTasks.json';
  const options = {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(newTask),
  };
  return await fetchData(url, options);
}

async function setFirebaseIdInDB(firebaseId) {
  const url = BASE_URL + `/board/newTasks/${firebaseId}/firebaseId.json`;
  const options = {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(firebaseId),
  };
  await fetchData(url, options);
}

async function deleteTaskInDB(firebaseId) {
  const url = BASE_URL + `/board/newTasks/${firebaseId}.json`;
  const options = {
    method: 'DELETE',
  };
  const response = await fetchData(url, options);
  if (!response) return;
}

/**
 * Sends a task in JSON format to Firebase via POST request.
 * Returns the ID (`name`) generated by Firebase.
 *
 * @param {Object} task - The task to be sent.
 * @returns {Promise<string|undefined>} - The Firebase ID or ‘undefined’ for errors.
 */
async function postTaskToFirebase(task) {
  const url = BASE_URL + '/board/default.json';
  const response = await fetchData(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(task),
  });
  return response?.name;
}

async function updateTaskStatusDB(path, task) {
  const urlStatus = BASE_URL + `${path}/${task.firebaseId}/status.json`;
  const optionsStatus = {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(task.status),
  };
  await fetchData(urlStatus, optionsStatus);
}

async function updateTaskSubtasksDB(path, task) {
  const urlSubtasks = BASE_URL + `${path}/${task.firebaseId}/subtasks.json`;
  const optionsSubtasks = {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(task.subtasks),
  };
  await fetchData(urlSubtasks, optionsSubtasks);
}

async function postToFirebase(contact) {
  try {
    let response = await fetch(BASE_URL + '/contacts.json', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(contact),
    });
    if (response.ok) {
      let data = await response.json();
      return { id: data.name, ...contact };
    }
  } catch (error) {
    console.error('Network error:', error);
    return null;
  }
}

/**
 * Updates a single task in Firebase with the modified task data.
 *
 * @param {string} path - Firebase path to the task.
 * @param {string} key - Firebase ID of the task.
 * @param {Object} task - Task object with updated data.
 * @returns {Promise<void>}
 */
async function updateTaskInFirebase(path, key, task) {
  let url = `${BASE_URL}${path}/${key}.json`;
  await fetch(url, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(task),
  });
}

/**
 * Fetches task data from a specific Firebase path.
 *
 * @param {string} path - Firebase path to fetch tasks from.
 * @returns {Promise<Object|undefined>} - The task data or undefined if fetch fails.
 */
async function fetchTasksFromPath(path) {
  let url = BASE_URL + path + '.json';
  return await fetchData(url, { method: 'GET' });
}

async function sendUpdateToFirebase(contactId, updatedContact) {
  const response = await fetch(`${BASE_URL}/contacts/${contactId}.json`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(updatedContact),
  });
}

async function loadTaskFromDB() {
  let data = await fetchData(BASE_URL + '/board/newTasks.json');
  if (!data) return [];
  return Object.values(data);
}

async function loadDefaultTaskFromDB() {
  let data = await fetchData(BASE_URL + '/board/default.json');
  if (!data) return [];
  return Object.values(data);
}

async function saveTaskToDB(task) {
  const response = await postNewTaskToDB(task);
  task.firebaseId = response.name;
  await setFirebaseIdInDB(response.name);
}